(in-package :colitrsynth)

(defmethod process ((self effect-plugin-model)
                    (connection audio-connection)
                    left right)
  (declare (optimize (speed 3) (safety 0)))
  (let ((out (.out-buffer self))
        (in (.in-buffer self))
        (io (.host-io self))
        (left-buffer (.left-buffer self))
        (right-buffer (.right-buffer self)))
    (declare ((simple-array (unsigned-byte 8) (*)) out in))
    (loop with j fixnum = (1- (the fixnum
                                   (* (the fixnum
                                           (* (the fixnum (.dest-bus connection))
                                              (the fixnum *frames-per-buffer*)))
                                      4 2)))
          for lr in (list left right)
          do (loop for i fixnum below *frames-per-buffer*
                   for n = (locally (declare (sb-ext:muffle-conditions sb-ext:compiler-note))
                             (ieee-floats:encode-float32
                              (the double-float
                                   (aref (the (simple-array double-float (*)) lr) i))))
                   do (setf (aref out (incf j))
                            (ldb (byte 8 0) n))
                      (setf (aref out (incf j)) (ldb (byte 8 8) n))
                      (setf (aref out (incf j)) (ldb (byte 8 16) n))
                      (setf (aref out (incf j)) (ldb (byte 8 24) n))))
    (when (<= (the fixnum (length (the list (.in self))))
              (the fixnum (incf (the fixnum (.in-count self)))))
      (sb-thread:with-mutex ((.mutex self))
        (write-byte +plugin-command-effect+ io)
        (let ((bpm
                (locally (declare (sb-ext:muffle-conditions sb-ext:compiler-note))
                  (ieee-floats:encode-float64
                   (the double-float (.bpm (.sequencer *audio*))))))
              (nframes (current-frame (.sequencer *audio*))))
          (declare (fixnum nframes))
          (write-byte (if (playing) 1 0) io)
          (write-byte (mod bpm #x100) io)
          (write-byte (mod (ash bpm -8) #x100) io)
          (write-byte (mod (ash bpm -16) #x100) io)
          (write-byte (mod (ash bpm -24) #x100) io)
          (write-byte (mod (ash bpm -32) #x100) io)
          (write-byte (mod (ash bpm -40) #x100) io)
          (write-byte (mod (ash bpm -48) #x100) io)
          (write-byte (mod (ash bpm -56) #x100) io)
          (write-byte (mod nframes #x100) io)
          (write-byte (mod (ash nframes -8) #x100) io)
          (write-byte (mod (ash nframes -16) #x100) io)
          (write-byte (mod (ash nframes -24) #x100) io)
          (write-byte (mod (ash nframes -32) #x100) io)
          (write-byte (mod (ash nframes -40) #x100) io)
          (write-byte (mod (ash nframes -48) #x100) io)
          (write-byte (mod (ash nframes -56) #x100) io))
        (force-output io)
        (write-sequence out io)
        (force-output io)
        (receive-from-plugin (.output-nbuses self) io in left-buffer right-buffer))
      (route self left-buffer right-buffer)
      (setf (.in-count self) 0)
      (clear-array out 0))))

(defmethod process ((self effect-plugin-model)
                    (connection plugin-param-connection)
                    value _)
  (set-param self (.param connection) (aref value 0))
  (let ((out (.out-buffer self))
        (in (.in-buffer self))
        (io (.host-io self))
        (left-buffer (.left-buffer self))
        (right-buffer (.right-buffer self)))
    (when (<= (the fixnum (length (the list (.in self))))
              (the fixnum (incf (the fixnum (.in-count self)))))
      (sb-thread:with-mutex ((.mutex self))
        (write-byte +plugin-command-effect+ io)
        (let ((bpm
                (locally (declare (sb-ext:muffle-conditions sb-ext:compiler-note))
                  (ieee-floats:encode-float64
                   (the double-float (.bpm (.sequencer *audio*))))))
              (nframes (current-frame (.sequencer *audio*))))
          (declare (fixnum nframes))
          (write-byte (if (playing) 1 0) io)
          (write-byte (mod bpm #x100) io)
          (write-byte (mod (ash bpm -8) #x100) io)
          (write-byte (mod (ash bpm -16) #x100) io)
          (write-byte (mod (ash bpm -24) #x100) io)
          (write-byte (mod (ash bpm -32) #x100) io)
          (write-byte (mod (ash bpm -40) #x100) io)
          (write-byte (mod (ash bpm -48) #x100) io)
          (write-byte (mod (ash bpm -56) #x100) io)
          (write-byte (mod nframes #x100) io)
          (write-byte (mod (ash nframes -8) #x100) io)
          (write-byte (mod (ash nframes -16) #x100) io)
          (write-byte (mod (ash nframes -24) #x100) io)
          (write-byte (mod (ash nframes -32) #x100) io)
          (write-byte (mod (ash nframes -40) #x100) io)
          (write-byte (mod (ash nframes -48) #x100) io)
          (write-byte (mod (ash nframes -56) #x100) io))
        (force-output io)
        (write-sequence out io)
        (force-output io)
        (receive-from-plugin (.output-nbuses self) io in left-buffer right-buffer))
      (route self left-buffer right-buffer)
      (setf (.in-count self) 0)
      (clear-array out 0))


    (defmethod print-object ((self plugin-model) stream)
      (print-unreadable-object (self stream :type t)
        (format stream "~a ~a"
                (.name (.plugin-description self))
                (.host-process self))))

    (defun open-editor (plugin-model)
      (sb-thread:with-mutex ((.mutex plugin-model))
        (write-byte +plugin-command-edit+ (.host-io plugin-model))
        (force-output (.host-io plugin-model))))



    (defun load-known-plugins ()
      (let ((xml (cxml:parse-file (format nil "~a\\CoLiTrSynth\\Plugin Host.settings"
                                          (sb-ext:posix-getenv "APPDATA"))
                                  (stp:make-builder)))
            (plugin-descriptions))
        (xpath:do-node-set (node (xpath:evaluate "/PROPERTIES/VALUE[@name=\"pluginList\"]/KNOWNPLUGINS/*" xml))
          (push (make-instance
                 'plugin-description
                 :name (xpath:string-value (xpath:evaluate "@name" node))
                 :format (xpath:string-value (xpath:evaluate "@format" node))
                 :category (xpath:string-value (xpath:evaluate "@category" node))
                 :manufacturer (xpath:string-value (xpath:evaluate "@manufacturer" node))
                 :version (xpath:string-value (xpath:evaluate "@version" node))
                 :file (xpath:string-value (xpath:evaluate "@file" node))
                 :unique-id (xpath:string-value (xpath:evaluate "@uniqueId" node))
                 :is-instrument (equal (xpath:string-value (xpath:evaluate "@isInstrument" node))
                                       "1")
                 :num-inputs (xpath:string-value (xpath:evaluate "@numInputs" node))
                 :num-outputs (xpath:string-value (xpath:evaluate "@numOutputs" node))
                 :uid (xpath:string-value (xpath:evaluate "@uid" node)))
                plugin-descriptions))
        (loop for x in plugin-descriptions
              unless  (and (equal (.format x) "VST")
                           (some (lambda (y) (and (equal (.format y) "VST3")
                                                  (equal (.name x) (.name y))))
                                 plugin-descriptions))
                collect x)))

    (defmethod get-params ((self plugin-model))
      (let ((io (.host-io self))
            (buffer (make-array 4 :element-type '(unsigned-byte 8)))
            (latency 0)
            (input-nbuses 0)
            (output-nbuses 0)
            (total-num-input-channels 0)
            (total-num-output-channels 0)
            (main-bus-num-input-channels 0)
            (main-bus-num-output-channels 0)
            (size 0))
        (sb-thread:with-mutex ((.mutex self))
          (write-byte +plugin-command-get-params+ io)
          (loop repeat 300
                until (ignore-errors (not (force-output io)))
                do (format *debug-io* "~&get-params: wait plugin host")
                   (sleep 0.1))
          (read-sequence buffer io)
          (setf (ldb (byte 8 0) latency) (aref buffer 0))
          (setf (ldb (byte 8 8) latency) (aref buffer 1))
          (setf (ldb (byte 8 16) latency) (aref buffer 2))
          (setf (ldb (byte 8 24) latency) (aref buffer 3))
          (setf (.latency self) latency)
          (read-sequence buffer io)
          (setf (ldb (byte 8 0) input-nbuses) (aref buffer 0))
          (setf (ldb (byte 8 8) input-nbuses) (aref buffer 1))
          (setf (ldb (byte 8 16) input-nbuses) (aref buffer 2))
          (setf (ldb (byte 8 24) input-nbuses) (aref buffer 3))
          (setf (.input-nbuses self) input-nbuses)
          (setf (.out-buffer self)
                ;; 4 sizeof(float) 2 left+right
                (make-array
                 (if (zerop input-nbuses)   ;MIDI のみ
                     1024                   ;サイズ適当
                     (* *frames-per-buffer* 4 2 input-nbuses))
                 :element-type '(unsigned-byte 8)))
          (read-sequence buffer io)
          (setf (ldb (byte 8 0) output-nbuses) (aref buffer 0))
          (setf (ldb (byte 8 8) output-nbuses) (aref buffer 1))
          (setf (ldb (byte 8 16) output-nbuses) (aref buffer 2))
          (setf (ldb (byte 8 24) output-nbuses) (aref buffer 3))
          (setf (.output-nbuses self) output-nbuses)
          (read-sequence buffer io)
          (setf (ldb (byte 8 0) total-num-input-channels) (aref buffer 0))
          (setf (ldb (byte 8 8) total-num-input-channels) (aref buffer 1))
          (setf (ldb (byte 8 16) total-num-input-channels) (aref buffer 2))
          (setf (ldb (byte 8 24) total-num-input-channels) (aref buffer 3))
          (read-sequence buffer io)
          (setf (ldb (byte 8 0) total-num-output-channels) (aref buffer 0))
          (setf (ldb (byte 8 8) total-num-output-channels) (aref buffer 1))
          (setf (ldb (byte 8 16) total-num-output-channels) (aref buffer 2))
          (setf (ldb (byte 8 24) total-num-output-channels) (aref buffer 3))
          (read-sequence buffer io)
          (setf (ldb (byte 8 0) main-bus-num-input-channels) (aref buffer 0))
          (setf (ldb (byte 8 8) main-bus-num-input-channels) (aref buffer 1))
          (setf (ldb (byte 8 16) main-bus-num-input-channels) (aref buffer 2))
          (setf (ldb (byte 8 24) main-bus-num-input-channels) (aref buffer 3))
          (read-sequence buffer io)
          (setf (ldb (byte 8 0) main-bus-num-output-channels) (aref buffer 0))
          (setf (ldb (byte 8 8) main-bus-num-output-channels) (aref buffer 1))
          (setf (ldb (byte 8 16) main-bus-num-output-channels) (aref buffer 2))
          (setf (ldb (byte 8 24) main-bus-num-output-channels) (aref buffer 3))
          (setf (.input-nchannels self) main-bus-num-input-channels)
          (setf (.sidechain-nchannels self) (- total-num-input-channels main-bus-num-input-channels))
          (setf (.output-nchannels self) total-num-output-channels)
          (read-sequence buffer io)
          (setf (ldb (byte 8 0) size) (aref buffer 0))
          (setf (ldb (byte 8 8) size) (aref buffer 1))
          (setf (ldb (byte 8 16) size) (aref buffer 2))
          (setf (ldb (byte 8 24) size) (aref buffer 3))
          (setf buffer (make-array size :element-type '(unsigned-byte 8)))
          (read-sequence buffer io))
        (with-input-from-string (in (sb-ext:octets-to-string buffer :external-format :utf-8))
          (setf (.params self)
                (loop for param in (read in)
                      collect (make-plugin-parameter :index (nth 0 param)
                                                     :name (nth 1 param)
                                                     :value (nth 2 param)
                                                     :value-as-text (nth 3 param))))))
      (setf (.left-buffer self) (make-array (.output-nbuses self)))
      (setf (.right-buffer self) (make-array (.output-nbuses self)))
      (loop for i below (.output-nbuses self)
            do (setf (aref (.left-buffer self) i) (make-buffer))
               (setf (aref (.right-buffer self) i) (make-buffer))))))
