(in-package :colitrsynth)

(defmethod process ((self effect-plugin-model) connection left right)
  (process-in self connection left right)
  (when (<= (the fixnum (length (the list (.in self))))
            (the fixnum (incf (the fixnum (.in-count self)))))
    (process-out self connection left right)))
  
(defmethod process-in ((self effect-plugin-model)
                    (connection audio-connection)
                    left right)
  (declare (optimize (speed 3) (safety 0)))
  (let ((out (.out-buffer self)))
    (declare ((simple-array (unsigned-byte 8) (*)) out in))
    (loop with j fixnum = (1- (the fixnum
                                   (* (the fixnum
                                           (* (the fixnum (.dest-bus connection))
                                              (the fixnum *frames-per-buffer*)))
                                      4 2)))
          for lr in (list left right)
          do (loop for i fixnum below *frames-per-buffer*
                   for n = (locally (declare (sb-ext:muffle-conditions sb-ext:compiler-note))
                             (ieee-floats:encode-float32
                              (the double-float
                                   (aref (the (simple-array double-float (*)) lr) i))))
                   do (setf (aref out (incf j))
                            (ldb (byte 8 0) n))
                      (setf (aref out (incf j)) (ldb (byte 8 8) n))
                      (setf (aref out (incf j)) (ldb (byte 8 16) n))
                      (setf (aref out (incf j)) (ldb (byte 8 24) n))))))

(defmethod process-in ((self effect-plugin-model)
                    (connection plugin-param-connection)
                    value _)
  (set-param self (.param connection) (aref value 0)))

(defmethod process-out ((self effect-plugin-model) connection left right)
  (declare (optimize (speed 3) (safety 0)))
  (let ((out (.out-buffer self))
        (in (.in-buffer self))
        (io (.host-io self))
        (left-buffer (.left-buffer self))
        (right-buffer (.right-buffer self)))
    (declare ((simple-array (unsigned-byte 8) (*)) out in))
    (sb-thread:with-mutex ((.mutex self))
      (write-byte +plugin-command-effect+ io)
      (let ((bpm
              (locally (declare (sb-ext:muffle-conditions sb-ext:compiler-note))
                (ieee-floats:encode-float64
                 (the double-float (.bpm (.sequencer *audio*))))))
            (nframes (current-frame (.sequencer *audio*))))
        (declare (fixnum nframes))
        (write-byte (if (playing) 1 0) io)
        (write-byte (mod bpm #x100) io)
        (write-byte (mod (ash bpm -8) #x100) io)
        (write-byte (mod (ash bpm -16) #x100) io)
        (write-byte (mod (ash bpm -24) #x100) io)
        (write-byte (mod (ash bpm -32) #x100) io)
        (write-byte (mod (ash bpm -40) #x100) io)
        (write-byte (mod (ash bpm -48) #x100) io)
        (write-byte (mod (ash bpm -56) #x100) io)
        (write-byte (mod nframes #x100) io)
        (write-byte (mod (ash nframes -8) #x100) io)
        (write-byte (mod (ash nframes -16) #x100) io)
        (write-byte (mod (ash nframes -24) #x100) io)
        (write-byte (mod (ash nframes -32) #x100) io)
        (write-byte (mod (ash nframes -40) #x100) io)
        (write-byte (mod (ash nframes -48) #x100) io)
        (write-byte (mod (ash nframes -56) #x100) io))
      (force-output io)
      (write-sequence out io)
      (force-output io)
      (receive-from-plugin (.output-nbuses self) io in left-buffer right-buffer))
    (route self left-buffer right-buffer)
    (setf (.in-count self) 0)
    (clear-array out 0)))

