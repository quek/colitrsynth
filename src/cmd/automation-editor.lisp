(in-package :colitrsynth)

(defcmd cmd::cursor-left ((self automation-editor)) ()
  (setf (.cursor-x self)
        (mod (1- (.cursor-x self)) 2)))

(defcmd cmd::cursor-right ((self automation-editor)) ()
    (setf (.cursor-x self)
        (mod (1+ (.cursor-x self)) 2)))

(defcmd cmd::insert-mode ((self automation-editor))
    (:next-keymap *automation-insert-keymap*)
  (call-next-method))

(defcmd cmd::insert-value ((self automation-editor))
    (:bind ((*automation-insert-keymap* sdl2-ffi:+sdl-scancode-0+)
            (*automation-insert-keymap* sdl2-ffi:+sdl-scancode-1+)
            (*automation-insert-keymap* sdl2-ffi:+sdl-scancode-2+)
            (*automation-insert-keymap* sdl2-ffi:+sdl-scancode-3+)
            (*automation-insert-keymap* sdl2-ffi:+sdl-scancode-4+)
            (*automation-insert-keymap* sdl2-ffi:+sdl-scancode-5+)
            (*automation-insert-keymap* sdl2-ffi:+sdl-scancode-6+)
            (*automation-insert-keymap* sdl2-ffi:+sdl-scancode-7+)
            (*automation-insert-keymap* sdl2-ffi:+sdl-scancode-8+)
            (*automation-insert-keymap* sdl2-ffi:+sdl-scancode-9+)
            (*automation-insert-keymap* sdl2-ffi:+sdl-scancode-a+)
            (*automation-insert-keymap* sdl2-ffi:+sdl-scancode-b+)
            (*automation-insert-keymap* sdl2-ffi:+sdl-scancode-c+)
            (*automation-insert-keymap* sdl2-ffi:+sdl-scancode-d+)
            (*automation-insert-keymap* sdl2-ffi:+sdl-scancode-e+)
            (*automation-insert-keymap* sdl2-ffi:+sdl-scancode-f+)))
  (let ((value (case (car *current-key*)
                 (#.sdl2-ffi:+sdl-scancode-0+ 0)
                 (#.sdl2-ffi:+sdl-scancode-1+ 1)
                 (#.sdl2-ffi:+sdl-scancode-2+ 2)
                 (#.sdl2-ffi:+sdl-scancode-3+ 3)
                 (#.sdl2-ffi:+sdl-scancode-4+ 4)
                 (#.sdl2-ffi:+sdl-scancode-5+ 5)
                 (#.sdl2-ffi:+sdl-scancode-6+ 6)
                 (#.sdl2-ffi:+sdl-scancode-7+ 7)
                 (#.sdl2-ffi:+sdl-scancode-8+ 8)
                 (#.sdl2-ffi:+sdl-scancode-9+ 9)
                 (#.sdl2-ffi:+sdl-scancode-a+ #xa)
                 (#.sdl2-ffi:+sdl-scancode-b+ #xb)
                 (#.sdl2-ffi:+sdl-scancode-c+ #xc)
                 (#.sdl2-ffi:+sdl-scancode-d+ #xd)
                 (#.sdl2-ffi:+sdl-scancode-e+ #xe)
                 (#.sdl2-ffi:+sdl-scancode-f+ #xf)
                 (t nil))))
    (let  ((position (if (at-value-x0-p self (.cursor-x self))
                         4 0)))
      (let* ((current-value (current-line self))
             (current-value (if (= current-value -1.0)
                                0
                                (round (* #xff current-value)))))
        (setf (ldb (byte 4 position) current-value)
              value)
        (setf (current-line self) (float (/ current-value #xff))))
      (step-next self))))
