(in-package :colitrsynth)

(defconstant +plugin-command-instrument+ 1)
(defconstant +plugin-command-effect+ 2)
(defconstant +plugin-command-manage+ 3)
(defconstant +plugin-command-edit+ 4)
(defconstant +plugin-command-quit+ 5)
(defconstant +plugin-command-get-state+ 6)
(defconstant +plugin-command-set-state+ 7)
(defconstant +plugin-command-get-params+ 8)
(defconstant +plugin-command-set-param+ 9)


(defmethod initialize-instance :after ((self plugin-module) &key)
  (let ((button (make-instance 'button :label "Open" :x *layout-space*
                                       :y (+ *font-size* (* *layout-space* 2)))))
    (add-child self button)
    (defmethod click ((button (eql button)) btn x y)
      (open-editor self))))

(defmethod initialize-instance :after ((self plugin-model) &key)
  (run-plugin-host self)
  (when (slot-boundp self 'plugin-state)
    (set-plugin-state self)))

(defmethod process-in ((self plugin-model)
                       (connection plugin-param-connection)
                       value _)
  (set-param self (.param connection) (aref value 0)))

(defmethod process-out ((self plugin-model))
  (declare (optimize (speed 3) (safety 0)))
  (let ((out (.out-buffer self))
        (in (.in-buffer self))
        (io (.host-io self))
        (left-buffer (.left-buffer self))
        (right-buffer (.right-buffer self)))
    (declare ((simple-array (unsigned-byte 8) (*)) out in))
    (sb-thread:with-mutex ((.mutex self))
      (write-byte (process-out-plugin-command self) io)
      (let ((bpm
              (locally (declare (sb-ext:muffle-conditions sb-ext:compiler-note))
                (ieee-floats:encode-float64
                 (the double-float (.bpm (.sequencer *audio*))))))
            (nframes (current-frame (.sequencer *audio*))))
        (declare (fixnum nframes))
        (write-byte (if (playing) 1 0) io)
        (write-byte (mod bpm #x100) io)
        (write-byte (mod (ash bpm -8) #x100) io)
        (write-byte (mod (ash bpm -16) #x100) io)
        (write-byte (mod (ash bpm -24) #x100) io)
        (write-byte (mod (ash bpm -32) #x100) io)
        (write-byte (mod (ash bpm -40) #x100) io)
        (write-byte (mod (ash bpm -48) #x100) io)
        (write-byte (mod (ash bpm -56) #x100) io)
        (write-byte (mod nframes #x100) io)
        (write-byte (mod (ash nframes -8) #x100) io)
        (write-byte (mod (ash nframes -16) #x100) io)
        (write-byte (mod (ash nframes -24) #x100) io)
        (write-byte (mod (ash nframes -32) #x100) io)
        (write-byte (mod (ash nframes -40) #x100) io)
        (write-byte (mod (ash nframes -48) #x100) io)
        (write-byte (mod (ash nframes -56) #x100) io))
      (force-output io)
      (write-sequence out io :end (.out-length self))
      (force-output io)
      (receive-from-plugin (.output-nbuses self) io in left-buffer right-buffer))
    (route self left-buffer right-buffer)
    (clear-array out 0)))

(declaim (inline receive-from-plugin))
(defun receive-from-plugin (nbuses io in left-buffer right-buffer)
  (declare (optimize (speed 3) (safety 0))
           ((simple-array (unsigned-byte 8) (*)) out in)
           (simple-vector left-buffer right-buffer))
  (loop for bus fixnum below nbuses
        do (loop for buffer in (list (aref left-buffer bus)
                                     (aref right-buffer bus))
                 do (read-sequence in io)
                    (locally
                        (declare ((SIMPLE-ARRAY DOUBLE-FLOAT (*)) buffer))
                      (loop for j fixnum below *frames-per-buffer*
                            with i fixnum = -1
                            do (setf (aref buffer j)
                                     (coerce (ieee-floats:decode-float32
                                              (let ((value 0))
                                                (setf (ldb (byte 8 0) value) (aref in (incf i)))
                                                (setf (ldb (byte 8 8) value) (aref in (incf i)))
                                                (setf (ldb (byte 8 16) value) (aref in (incf i)))
                                                (setf (ldb (byte 8 24) value) (aref in (incf i)))
                                                value))
                                             'double-float)))))))

(defmethod set-plugin-state ((self plugin-model))
  (let* ((io (.host-io self))
         (state (.plugin-state self))
         (state-length (length state)))
    (sb-thread:with-mutex ((.mutex self))
      (write-byte +plugin-command-set-state+ io)
      (loop repeat 100
            until (ignore-errors (not (force-output io)))
            do (sleep 0.1))
      (write-byte (logand state-length #xff) io)
      (write-byte (logand (ash state-length -8) #xff) io)
      (write-byte (logand (ash state-length -16) #xff) io)
      (write-byte (logand (ash state-length -24) #xff) io)
      (force-output io)
      (write-sequence state io)
      (force-output io))))

(defmethod print-object ((self plugin-model) stream)
  (print-unreadable-object (self stream :type t)
    (format stream "~a ~a"
            (.name (.plugin-description self))
            (.host-process self))))

(defun open-editor (plugin-model)
  (sb-thread:with-mutex ((.mutex plugin-model))
    (write-byte +plugin-command-edit+ (.host-io plugin-model))
    (force-output (.host-io plugin-model))))

(defun load-known-plugins ()
  (let ((xml (cxml:parse-file (format nil "~a\\CoLiTrSynth\\Plugin Host.settings"
                                      (sb-ext:posix-getenv "APPDATA"))
                              (stp:make-builder)))
        (plugin-descriptions))
    (xpath:do-node-set (node (xpath:evaluate "/PROPERTIES/VALUE[@name=\"pluginList\"]/KNOWNPLUGINS/*" xml))
      (push (make-instance
             'plugin-description
             :name (xpath:string-value (xpath:evaluate "@name" node))
             :format (xpath:string-value (xpath:evaluate "@format" node))
             :category (xpath:string-value (xpath:evaluate "@category" node))
             :manufacturer (xpath:string-value (xpath:evaluate "@manufacturer" node))
             :version (xpath:string-value (xpath:evaluate "@version" node))
             :file (xpath:string-value (xpath:evaluate "@file" node))
             :unique-id (xpath:string-value (xpath:evaluate "@uniqueId" node))
             :is-instrument (equal (xpath:string-value (xpath:evaluate "@isInstrument" node))
                                   "1")
             :num-inputs (xpath:string-value (xpath:evaluate "@numInputs" node))
             :num-outputs (xpath:string-value (xpath:evaluate "@numOutputs" node))
             :uid (xpath:string-value (xpath:evaluate "@uid" node)))
            plugin-descriptions))
    (loop for x in plugin-descriptions
          unless  (and (equal (.format x) "VST")
                       (some (lambda (y) (and (equal (.format y) "VST3")
                                              (equal (.name x) (.name y))))
                             plugin-descriptions))
            collect x)))


(defmethod get-params ((self plugin-model))
  (let ((io (.host-io self))
        (buffer (make-array 4 :element-type '(unsigned-byte 8)))
        (latency 0)
        (input-nbuses 0)
        (output-nbuses 0)
        (total-num-input-channels 0)
        (total-num-output-channels 0)
        (main-bus-num-input-channels 0)
        (main-bus-num-output-channels 0)
        (size 0))
    (sb-thread:with-mutex ((.mutex self))
      (write-byte +plugin-command-get-params+ io)
      (loop repeat 300
            until (ignore-errors (not (force-output io)))
            do (format *debug-io* "~&get-params: wait plugin host")
               (sleep 0.1))
      (read-sequence buffer io)
      (setf (ldb (byte 8 0) latency) (aref buffer 0))
      (setf (ldb (byte 8 8) latency) (aref buffer 1))
      (setf (ldb (byte 8 16) latency) (aref buffer 2))
      (setf (ldb (byte 8 24) latency) (aref buffer 3))
      (setf (.latency self) latency)
      (read-sequence buffer io)
      (setf (ldb (byte 8 0) input-nbuses) (aref buffer 0))
      (setf (ldb (byte 8 8) input-nbuses) (aref buffer 1))
      (setf (ldb (byte 8 16) input-nbuses) (aref buffer 2))
      (setf (ldb (byte 8 24) input-nbuses) (aref buffer 3))
      (setf (.input-nbuses self) input-nbuses)
      (setf (.out-length self)
            (if (zerop input-nbuses)
                ;; MIDI のみの場合サイズ適当
                4096
                ;; 4 sizeof(float) 2 left+right
                (* *frames-per-buffer* 4 2 input-nbuses)))
      (setf (.out-buffer self)
            (make-array (.out-length self)
                        :element-type '(unsigned-byte 8)))
      (read-sequence buffer io)
      (setf (ldb (byte 8 0) output-nbuses) (aref buffer 0))
      (setf (ldb (byte 8 8) output-nbuses) (aref buffer 1))
      (setf (ldb (byte 8 16) output-nbuses) (aref buffer 2))
      (setf (ldb (byte 8 24) output-nbuses) (aref buffer 3))
      (setf (.output-nbuses self) output-nbuses)
      (read-sequence buffer io)
      (setf (ldb (byte 8 0) total-num-input-channels) (aref buffer 0))
      (setf (ldb (byte 8 8) total-num-input-channels) (aref buffer 1))
      (setf (ldb (byte 8 16) total-num-input-channels) (aref buffer 2))
      (setf (ldb (byte 8 24) total-num-input-channels) (aref buffer 3))
      (read-sequence buffer io)
      (setf (ldb (byte 8 0) total-num-output-channels) (aref buffer 0))
      (setf (ldb (byte 8 8) total-num-output-channels) (aref buffer 1))
      (setf (ldb (byte 8 16) total-num-output-channels) (aref buffer 2))
      (setf (ldb (byte 8 24) total-num-output-channels) (aref buffer 3))
      (read-sequence buffer io)
      (setf (ldb (byte 8 0) main-bus-num-input-channels) (aref buffer 0))
      (setf (ldb (byte 8 8) main-bus-num-input-channels) (aref buffer 1))
      (setf (ldb (byte 8 16) main-bus-num-input-channels) (aref buffer 2))
      (setf (ldb (byte 8 24) main-bus-num-input-channels) (aref buffer 3))
      (read-sequence buffer io)
      (setf (ldb (byte 8 0) main-bus-num-output-channels) (aref buffer 0))
      (setf (ldb (byte 8 8) main-bus-num-output-channels) (aref buffer 1))
      (setf (ldb (byte 8 16) main-bus-num-output-channels) (aref buffer 2))
      (setf (ldb (byte 8 24) main-bus-num-output-channels) (aref buffer 3))
      (setf (.input-nchannels self) main-bus-num-input-channels)
      (setf (.sidechain-nchannels self) (- total-num-input-channels main-bus-num-input-channels))
      (setf (.output-nchannels self) total-num-output-channels)
      (read-sequence buffer io)
      (setf (ldb (byte 8 0) size) (aref buffer 0))
      (setf (ldb (byte 8 8) size) (aref buffer 1))
      (setf (ldb (byte 8 16) size) (aref buffer 2))
      (setf (ldb (byte 8 24) size) (aref buffer 3))
      (setf buffer (make-array size :element-type '(unsigned-byte 8)))
      (read-sequence buffer io))
    (with-input-from-string (in (sb-ext:octets-to-string buffer :external-format :utf-8))
      (setf (.params self)
            (loop for param in (read in)
                  collect (make-plugin-parameter :index (nth 0 param)
                                                 :name (nth 1 param)
                                                 :value (nth 2 param)
                                                 :value-as-text (nth 3 param))))))
  (setf (.left-buffer self) (make-array (.output-nbuses self)))
  (setf (.right-buffer self) (make-array (.output-nbuses self)))
  (loop for i below (.output-nbuses self)
        do (setf (aref (.left-buffer self) i) (make-buffer))
           (setf (aref (.right-buffer self) i) (make-buffer))))

(defmethod set-param ((self plugin-model) param value)
  (let ((io (.host-io self))
        (buffer (make-array 8 :element-type '(unsigned-byte 8)))
        (i -1)
        (index (plugin-parameter-index param)))
    (sb-thread:with-mutex ((.mutex self))
      (write-byte +plugin-command-set-param+ io)
      (force-output io)
      (setf (aref buffer (incf i)) (ldb (byte 8 0) index))
      (setf (aref buffer (incf i)) (ldb (byte 8 8) index))
      (setf (aref buffer (incf i)) (ldb (byte 8 16) index))
      (setf (aref buffer (incf i)) (ldb (byte 8 24) index))
      (let ((value (ieee-floats:encode-float32 value)))
        (setf (aref buffer (incf i)) (ldb (byte 8 0) value))
        (setf (aref buffer (incf i)) (ldb (byte 8 8) value))
        (setf (aref buffer (incf i)) (ldb (byte 8 16) value))
        (setf (aref buffer (incf i)) (ldb (byte 8 24) value)))
      (write-sequence buffer io)
      (force-output io))))


(defmethod connect-param ((from plugin-model) (to plugin-model) index)
  )

(defmethod run-plugin-host ((self plugin-model))
  (when (slot-boundp self 'plugin-description)
    (setf (.host-process self)
          (sb-ext:run-program *plugin-host-exe*
                              (list
                               "--sample-rate" (format nil "~f" *sample-rate*)
                               "--buffer-size" (format nil "~d" *frames-per-buffer*)
                               "--plugin-name" (.name (.plugin-description self)))
                              :wait nil))
    (push (.host-process self) *plugin-processes*)
    (let ((pipe (sb-win32::create-named-pipe (format nil "~a~a" *plugin-host-pipe-name*
                                                     (sb-ext:process-pid (.host-process self)))
                                             sb-win32::pipe-access-duplex
                                             sb-win32::pipe-type-byte
                                             255 0 0 100 (cffi-sys::null-pointer))))
      (setf (.host-io self)
            (sb-sys:make-fd-stream pipe :input t :output t :element-type 'unsigned-byte)))
    (get-params self)))

(defmethod close ((self plugin-model) &key abort)
  (declare (ignore abort))
  (let ((io (.host-io self)))
    (when io
      (sb-thread:with-mutex ((.mutex self))
        (write-byte +plugin-command-quit+ io)
        (ignore-errors (force-output io))
        (ignore-errors (close io))
        (setf (.host-io self) nil))))
  (call-next-method))

(defmethod get-plugin-state ((self plugin-model))
  (let ((io (.host-io self)))
    (sb-thread:with-mutex ((.mutex self))
      (write-byte +plugin-command-get-state+ io)
      (force-output io)
      (let* ((len (+ (read-byte io)
                     (ash (read-byte io) 8)
                     (ash (read-byte io) 16)
                     (ash (read-byte io) 24)))
             (state (make-array len :element-type '(unsigned-byte 8)
                                    :initial-element 0)))
        (read-sequence state io)
        (setf (.plugin-state self) state)))))

(defmethod serialize ((self plugin-module))
  (let ((pd (.plugin-description self)))
    (get-plugin-state self)
    `((setf (.plugin-description x)
            (make-instance 'plugin-description
                           :name ,(.name pd)
                           :format ,(.format pd)
                           :category ,(.category pd)
                           :manufacturer ,(.manufacturer pd)
                           :version ,(.version pd)
                           :file ,(.file pd)
                           :unique-id ,(.unique-id pd)
                           :is-instrument ,(.is-instrument pd)
                           :num-inputs ,(.num-inputs pd)
                           :num-outputs ,(.num-outputs pd)
                           :uid ,(.uid pd))
            (.plugin-state x) ,(serialize (.plugin-state self)))
      ,@(call-next-method)
      (run-plugin-host x)
      (set-plugin-state x))))
